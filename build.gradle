plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$dependensyManagementVersion"
    id 'java'
    id "me.champeau.jmh" version "$jmhPluginVersion"
}

group = "$packageGroup"
version = "$projectVersion"
sourceCompatibility = "$projectJavaVersion"

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

jar {
    enabled = false
}

bootJar {
    archiveFileName = project.name + ".jar"
}

dependencies {
    // Web
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    // Monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // builder
    implementation "com.github.kenglxn.qrgen:javase:$qrgenVresion"
    // bit matrix
    implementation "com.google.zxing:javase:$zxingVersion"
    // SVGGraphics2D
    implementation "org.jfree:jfreesvg:$jfreesvgVersion"

    // benchmark settings (for run in test classes)
//    testImplementation "org.openjdk.jmh:jmh-core:$jmhVersion"
//    implementation "org.openjdk.jmh:jmh-core:$jmhVersion"
    // this is the line that solves the missing /META-INF/BenchmarkList error
//    testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
//    annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"

    // k8s manifest generator
    annotationProcessor "io.dekorate:kubernetes-annotations:$decorateVersion"
    implementation "io.dekorate:kubernetes-spring-starter:$decorateVersion"

    // Test
    implementation 'junit:junit:4.13.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Utils
    implementation "com.google.guava:guava:$guavaVersion"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    jmhCompileOnly 'org.projectlombok:lombok'
    jmhAnnotationProcessor 'org.projectlombok:lombok'
}

jmh {
    warmupIterations = 1
    iterations = 1
    fork = 0
    threads = 1
}

tasks.named('test') {
    useJUnitPlatform()
}
